# TypeProf 0.21.3

# Classes
module RParsec
  Expected: Class
  Associativities: [:prefix, :postfix, :infixn, :infixr, :infixl]
  Nil: untyped
  VERSION: String

  class AltParser
    @alts: [Parser, untyped]
    @lookahead: Integer

    def initialize: ([Parser, untyped] alts, ?Integer la) -> void
    def _parse: (untyped ctxt) -> bool
    def withLookahead: (untyped n) -> AltParser
    def |: (untyped other) -> AltParser
  end

  class AnyParser
    def _parse: (untyped ctxt) -> untyped
  end

  class AreParser
    @vals: bot
    @msg: bot

    def _parse: (untyped ctxt) -> untyped
  end

  class AtomParser
    @parser: bot

    def _parse: (untyped ctxt) -> bool
    def atomize: -> AtomParser
  end

  class BestParser
    @alts: bot
    @longer: bot

    def _parse: (untyped ctxt) -> false
  end

  class BoundParser
    @parser: bot
    @proc: bot

    def _parse: (untyped ctxt) -> false
  end

  class BoundnParser
    @parser: bot
    @proc: bot

    def _parse: (untyped ctxt) -> false
  end

  class CatchParser
    @symbol: bot
    @parser: bot

    def _parse: (untyped ctxt) -> false
  end

  class ParseContext
    @scanner: StringScanner?

    attr_reader src: [untyped]
    attr_accessor error: nil
    attr_accessor index: Complex | Float | Integer | Rational
    attr_accessor result: untyped
    def initialize: ([untyped] src, ?Integer index, ?nil error) -> void
    def scanner: -> StringScanner?
    def prepare_error: -> nil
    def to_msg: -> String
    def error_input: -> nil
    def reset_error: -> nil
    def current: -> untyped
    def eof: -> bool
    def available: -> (Complex | Float | Integer | Rational)
    def peek: (untyped i) -> untyped
    def next: -> (Complex | Float | Integer | Rational)
    def advance: (untyped n) -> (Complex | Float | Integer | Rational)
    def retn: (untyped val) -> true
    def failure: (?nil msg) -> false
    def expecting: (?nil expected) -> false
    def get_current_input: -> nil
  end

  module DefHelper
    def def_readable: (*:code | :index vars) -> untyped
    def initialize: (*untyped params) -> void
  end

  class EofParser
    @msg: bot

    def _parse: (untyped ctxt) -> true
  end

  class ParserException < StandardError
    extend DefHelper
  end

  class Failure
    @msg: nil

    def initialize: (untyped ind, untyped input, ?nil message) -> void
    attr_reader input: untyped
    attr_accessor index: untyped
    def msg: -> String
  end

  class ExpectParser
    @parser: Parser
    @msg: untyped
    @name: untyped

    def initialize: (Parser parser, untyped msg) -> void
    def _parse: (untyped ctxt) -> bool
  end

  module Expressions
    KindPrecedence: {prefix: Integer, postfix: Integer, infixn: Integer, infixr: Integer, infixl: Integer}

    def self.array_to_dict: ([:prefix, :postfix, :infixn, :infixr, :infixl] arr) -> {prefix: Integer, postfix: Integer, infixn: Integer, infixr: Integer, infixl: Integer}
    def self.build: (untyped term, untyped table, ?nil delim) -> bot
    def self.apply_operators: (untyped term, Array[[bot, bot]] entries, nil delim) -> bot
    def self.apply_operator: (untyped term, untyped op, untyped kind, untyped delim) -> untyped
    def self.ignore_rest: (untyped parser, untyped delim) -> untyped
    def self.prepare_suites: (untyped table) -> Hash[untyped, untyped]
  end

  class FailureParser
    @msg: bot

    def _parse: (untyped ctxt) -> untyped
  end

  class Failures
    def self.add_error: (untyped err, untyped e) -> untyped
    def self.get_first_element: (untyped err) -> untyped
    def self.compare_error: (untyped e1, untyped e2) -> Integer
  end

  class FollowedParser
    @p1: bot
    @p2: bot

    def _parse: (untyped ctxt) -> false
  end

  class FragmentParser
    @parser: bot

    def _parse: (untyped ctxt) -> false
  end

  module FunctorMixin
    def flip: -> untyped
    def compose: (untyped other) -> untyped
    alias << compose
    def >>: (untyped other) -> untyped
    def curry: (?untyped ary) -> untyped
    def reverse_curry: (?untyped ary) -> untyped
    def uncurry: -> untyped
    def reverse_uncurry: -> untyped
    def repeat: (untyped n) -> untyped
    alias * repeat
    def power: (untyped n) -> untyped
    alias ** power
  end

  module Functors
    Id: ^(untyped) -> untyped
    Idn: ^(*untyped) -> untyped
    Neg: ^(untyped) -> untyped
    Inc: ^(untyped) -> untyped
    Succ: ^(untyped) -> untyped
    Dec: ^(untyped) -> untyped
    Plus: ^(untyped, untyped) -> untyped
    Minus: ^(untyped, untyped) -> untyped
    Mul: ^(untyped, untyped) -> untyped
    Div: ^(untyped, untyped) -> untyped
    Mod: ^(untyped, untyped) -> untyped
    Power: ^(untyped, untyped) -> untyped
    Not: ^(untyped, untyped) -> untyped
    And: ^(untyped, untyped) -> untyped
    Or: ^(untyped, untyped) -> untyped
    Xor: ^(untyped, untyped) -> untyped
    BitAnd: ^(untyped, untyped) -> untyped
    Union: ^(untyped, untyped) -> untyped
    Match: ^(untyped, untyped) -> untyped
    Eq: ^(untyped, untyped) -> untyped
    Ne: ^(untyped, untyped) -> untyped
    Lt: ^(untyped, untyped) -> untyped
    Gt: ^(untyped, untyped) -> untyped
    Le: ^(untyped, untyped) -> untyped
    Ge: ^(untyped, untyped) -> untyped
    Compare: ^(untyped, untyped) -> untyped
    Call: ^(untyped, untyped) -> untyped
    Feed: ^(untyped, untyped) -> untyped
    Fst: ^(untyped, untyped) -> untyped
    Snd: ^(untyped, untyped) -> untyped
    At: ^(untyped, untyped) -> untyped
    To_a: ^(untyped) -> untyped
    To_s: ^(untyped) -> untyped
    To_i: ^(untyped) -> untyped
    To_sym: ^(untyped) -> untyped
    To_f: ^(untyped) -> untyped
    extend Functors

    def const: (nil v) -> untyped
    def nth: (untyped n) -> untyped
    def flip: -> untyped
    def compose: (untyped f1, untyped f2) -> untyped
    def curry: (untyped arity) -> ^(?untyped, *untyped) -> untyped??
    def reverse_curry: (untyped arity) -> ^(?untyped, *untyped) -> untyped??
    def uncurry: -> nil
    def reverse_uncurry: -> nil
    def repeat: (untyped n) -> untyped
    def power: (untyped n) -> nil
    def self.make_curry: (untyped arity) ?{ (*untyped) -> untyped } -> ^(?untyped, *untyped) -> untyped??
    def self.make_reverse_curry: (untyped arity) ?{ (*untyped) -> untyped } -> ^(?untyped, *untyped) -> untyped??
  end

  class GetIndexParser
    def _parse: (untyped ctxt) -> untyped
  end

  class Keywords
    @case_sensitive: bool
    @default_lexer: untyped
    @name_map: Hash[untyped, untyped]
    @symbol_map: Hash[untyped, untyped]

    attr_reader keyword_symbol: :keyword
    attr_reader lexer: untyped
    def case_sensitive?: -> bool?
    def self.case_sensitive: (untyped words, ?untyped default_lexer, ?:keyword keyword_symbol) -> Keywords
    def self.case_insensitive: (untyped words, ?untyped default_lexer, ?:keyword keyword_symbol) -> Keywords
    def initialize: (untyped words, bool case_sensitive, untyped default_lexer, :keyword keyword_symbol) -> void
    def parser: (untyped key) -> nil
    alias [] parser

    private
    def make_lexer: (untyped default_lexer, Hash[untyped, untyped] word_map) -> untyped
    def canonical_name: (untyped name) -> untyped
    def copy_words: (untyped words, bool case_sensitive) -> untyped
  end

  class LazyParser
    @block: bot

    def _parse: (untyped ctxt) -> untyped
  end

  class CodeLocator
    LF: String
    extend DefHelper

    def locate: (untyped ind) -> [Integer, Integer]
    def _locateEof: -> [Integer, Integer]
  end

  class LookAheadSensitiveParser
    @lookahead: Integer

    def initialize: (?Integer la) -> void
    def visible: (untyped ctxt, untyped n) -> untyped
    def lookahead: (untyped n) -> LookAheadSensitiveParser
    def not: (?String msg) -> NotParser
  end

  class NotParser < LookAheadSensitiveParser
    @parser: LookAheadSensitiveParser | Parser
    @msg: String
    @name: String

    def initialize: (LookAheadSensitiveParser | Parser parser, String msg, ?Integer la) -> void
                  | (LookAheadSensitiveParser | Parser parser, String msg, ?Integer la) -> void
    def _parse: (untyped ctxt) -> false
              | (untyped ctxt) -> false
    def withLookahead: (untyped n) -> NotParser
                     | (untyped n) -> NotParser
    def not: -> (LookAheadSensitiveParser | Parser)
           | -> (LookAheadSensitiveParser | Parser)
  end

  class Many_Parser
    @least: bot
    @parser: bot

    def _parse: (untyped ctxt) -> bool
  end

  class ManyParser
    @least: bot
    @parser: bot

    def _parse: (untyped ctxt) -> false
  end

  class MapCurrentParser
    @proc: bot

    def _parse: (untyped ctxt) -> true
  end

  class MapParser
    @parser: bot
    @proc: bot

    def _parse: (untyped ctxt) -> bool
  end

  class MapnCurrentParser
    @proc: bot

    def _parse: (untyped ctxt) -> true
  end

  class MapnParser
    @parser: bot
    @proc: bot

    def _parse: (untyped ctxt) -> bool
  end

  module Monad
    @monad: untyped

    attr_reader this: Parser
    def initMonad: (untyped m, Parser v) -> Parser
    def value: (Array[untyped]? v) -> untyped
    def bind: ?{ -> untyped } -> untyped
    def seq: (untyped other) -> untyped
    def map: -> untyped
    def plus: (untyped other) -> untyped
  end

  class NestedParser
    @parser1: bot
    @parser2: bot

    def _parse: (untyped ctxt) -> bool

    private
    def _run_nested: (untyped start, untyped ctxt, untyped src, nil parser) -> bool
    def _get_index: (ParseContext ctxt) -> (Complex | Float | Integer | Rational)
    def _run_parser: (nil parser, untyped old_ctxt, ParseContext new_ctxt) -> bool
  end

  class OneParser
    def _parse: (untyped _ctxt) -> true
  end

  class OperatorTable
    attr_reader operators: Array[untyped]
    def initialize: -> void
    def prefix: (untyped op, untyped precedence) -> OperatorTable
    def postfix: (untyped op, untyped precedence) -> OperatorTable
    def infixn: (untyped op, untyped precedence) -> OperatorTable
    def infixr: (untyped op, untyped precedence) -> OperatorTable
    def infixl: (untyped op, untyped precedence) -> OperatorTable
  end

  class Operators
    @lexers: Hash[untyped, untyped]
    @parsers: Hash[untyped, untyped]
    @lexer: untyped

    def initialize: (untyped ops) -> void
    def parser: (untyped op) -> nil
    alias [] parser
    def lexer: (?nil op) -> untyped
    def self.sort: (untyped ops) -> Array[untyped]?
    def self.populate_suites: (Array[untyped] suites, untyped s) -> Array[untyped]?
    def self.populate_suite: (nil suite, untyped s) -> bool
    def self.to_array: (Array[untyped] suites) -> Array[untyped]?
  end

  class Parser
    MyMonad: untyped
    include Monad
    include Functors
    @monad: untyped

    attr_accessor name: bot
    def self.init: (*:expected | :index | :least | :max | :msg | :parser | :parsers | :pred | :proc | :ptn | :str | :symbol | :times | :value vars) -> untyped

    private
    def initialize: -> void
    def _display_current_input: (untyped input, untyped _code, Complex | Float | Integer | Rational _index) -> String
    def _add_encountered_error: (String msg, String encountered) -> String
    def _add_location_to_error: (CodeLocator locator, ParseContext ctxt, String msg, untyped _code) -> String

    public
    def parse: (untyped src) -> untyped
    def map: -> Parser
    def bindn: -> Parser
    def mapn: -> Parser
    def atomize: -> AtomParser
    def peek: -> untyped
    def not: (?String msg) -> NotParser
    alias ~ not
    def lookahead: (untyped _n) -> Parser
    def expect: (untyped msg) -> ExpectParser
    def followed: (untyped other) -> FollowedParser
    alias << followed
    def repeat_: (Integer min, ?Integer max) -> Parser
    alias * repeat_
    def repeat: (Integer min, ?Integer max) -> untyped
    def many_: (?Integer least) -> Many_Parser
    def many: (?Integer least) -> ManyParser
    def some_: (untyped max) -> Parser
    def some: (untyped max) -> untyped
    def separated1: (untyped delim) -> untyped
    def separated: (untyped delim) -> untyped
    def delimited1: (untyped delim) -> untyped
    def delimited: (untyped delim) -> untyped
    def to_s: -> String
    def |: (untyped other) -> AltParser
    def optional: (?nil default) -> untyped
    def catchp: (untyped symbol) -> CatchParser
    def fragment: -> FragmentParser
    def nested: (untyped parser) -> NestedParser
    def lexeme: (?untyped delim) -> untyped
    def prefix: (untyped op) -> untyped
    def postfix: (untyped op) -> untyped
    def infixn: (untyped op) -> untyped
    def infixl: (untyped op) -> untyped
    def infixr: (untyped op) -> untyped
    def token: (untyped kind) -> untyped
    def seq: (untyped other) -> untyped
    def >>: (untyped other) -> untyped

    private
    def autobox_parser: (untyped val) -> untyped
    def _infix_rest: (untyped operator, Parser operand) -> untyped
    def _parse: (ParseContext _ctxt) -> false

    public
    def self.initialize: (*untyped params) -> void
  end

  class ParserMonad
    def fail: (untyped msg) -> FailureParser
    def value: (untyped v) -> untyped
    def bind: (untyped v) -> untyped
    def mplus: (untyped p1, untyped p2) -> untyped
  end

  module Parsers
    Whitespaces: String
    extend Parsers

    def failure: (untyped msg) -> FailureParser
    def value: (nil v) -> untyped
    def sum: (*untyped alts) -> untyped
    def alt: (*untyped alts) -> AltParser
    def satisfies: (String expected) ?{ -> bool } -> untyped
    def is: (String? v, ?String expected) -> untyped
    def isnt: (String? v, ?String expected) -> untyped
    def among: (*untyped vals) -> untyped
    def not_among: (*untyped vals) -> untyped
    def char: (String c) -> untyped
    def not_char: (String c) -> untyped
    def eof: (?String expected) -> EofParser
    def are: (untyped vals, ?String expected) -> AreParser
    def arent: (untyped vals, ?String expected) -> untyped
    def string: (untyped str, ?String msg) -> AreParser
    def not_string: (untyped str, ?String msg) -> untyped
    alias str string
    def sequence: (*untyped parsers) -> untyped
    def get_index: -> GetIndexParser
    def set_index: (untyped ind) -> untyped
    def longest: (*untyped parsers) -> BestParser
    def shortest: (*untyped parsers) -> BestParser
    alias shorter shortest
    alias longer longest
    def any: -> AnyParser
    def zero: -> untyped
    def one: -> OneParser
    def range: (untyped from, untyped to, ?String msg) -> untyped
    def throwp: (untyped symbol) -> untyped
    def regexp: (Regexp ptn, ?String expected) -> untyped
    def word: (?String expected) -> untyped
    def integer: (?String expected) -> untyped
    def number: (?String expected) -> untyped
    def string_nocase: (untyped str, ?String expected) -> untyped
    def token: (*untyped kinds) -> untyped
    def whitespace: (?String expected) -> untyped
    def whitespaces: (?String expected) -> untyped
    def comment_line: (untyped start) -> untyped
    def comment_block: (untyped open, untyped close) -> untyped
    def lazy: -> LazyParser
    def watch: -> OneParser
    def watchn: -> OneParser
    def map: -> OneParser
    def mapn: -> OneParser

    private
    def as_regexp: (Regexp ptn) -> Regexp
    def as_char: (untyped c) -> untyped
    def as_num: (untyped c) -> untyped
    def as_list: (untyped vals) -> untyped
  end

  class PeekParser < Parser
    @parser: bot

    def _parse: (untyped ctxt) -> bool
    def peek: -> PeekParser
  end

  class PlusParser < LookAheadSensitiveParser
    @alts: untyped

    def initialize: (untyped alts, ?Integer la) -> void
    def _parse: (untyped ctxt) -> bool
    def withLookahead: (untyped n) -> PlusParser
    def plus: (untyped other) -> PlusParser
  end

  class RegexpParser < Parser
    @ptn: bot
    @msg: bot

    def _parse: (untyped ctxt) -> untyped
  end

  class Repeat_Parser < Parser
    @times: bot
    @parser: bot

    def _parse: (untyped ctxt) -> bool
  end

  class RepeatParser < Parser
    @times: bot
    @parser: bot

    def _parse: (untyped ctxt) -> false
  end

  class SatisfiesParser < Parser
    @pred: bot
    @expected: bot

    def _parse: (untyped ctxt) -> untyped
  end

  class SequenceParser < Parser
    @proc: bot
    @parsers: bot

    def _parse: (untyped ctxt) -> bool
    def seq: (untyped other) -> SequenceParser
  end

  class SetIndexParser < Parser
    @index: bot

    def _parse: (untyped ctxt) -> nil
  end

  class Some_Parser < Parser
    @least: bot
    @max: bot
    @parser: bot

    def _parse: (untyped ctxt) -> bool
  end

  class SomeParser < Parser
    @least: bot
    @max: bot
    @parser: bot

    def _parse: (untyped ctxt) -> false
  end

  class StringCaseInsensitiveParser < Parser
    @str: bot
    @msg: bot

    private
    def _downcase: (untyped c) -> untyped

    public
    def _parse: (untyped ctxt) -> untyped
  end

  class ThrowParser < Parser
    @symbol: bot

    def _parse: (untyped _ctxt) -> bot
  end

  class Token
    @text: bot
    @kind: bot

    def length: -> untyped
    def to_s: -> String
  end

  class TokenParser < Parser
    @parser: bot
    @symbol: bot

    def _parse: (untyped ctxt) -> false
  end

  class ValueParser < Parser
    @value: bot

    def _parse: (untyped ctxt) -> untyped
  end

  class WatchParser < Parser
    @proc: bot

    def _parse: (untyped ctxt) -> true
  end

  class WatchnParser < Parser
    @proc: bot

    def _parse: (untyped ctxt) -> true
  end

  class ZeroParser < Parser
    def _parse: (untyped ctxt) -> untyped
  end
end
