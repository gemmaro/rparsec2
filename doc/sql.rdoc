= SQL parser in rparsec

Powered by Ruby syntax, parser written in rparsec can be very concise.
You have seen how easy the calculator and s-expression parser is.  In
this article we will demonstrate a more practical parser that parses
SQL-like language.

Informally, the syntax supported are:

- number literal
- string literal (quoted by single quote and escaped by double single
  quote)
- variables starting with a <tt>$</tt> character.
- Line commment indicated by a <tt>#</tt>.
- Standard SQL constructs such as +select+, +from+, +where+, <tt>group
  by</tt>, <tt>order by</tt>, +union+
- Joins such as <tt>inner join</tt>, <tt>left join</tt>, <tt>right
  join</tt>, <tt>full join</tt>, <tt>cross join</tt>
- Expression with <tt>+</tt>, <tt>-</tt>, <tt>*</tt>, <tt>/</tt>,
  <tt>%</tt> operators.
- <tt>case-when-else-end</tt> expression in Ruby syntax.
- Comparisons such as <tt>=</tt>, <tt>!=</tt>, <tt>></tt>, <tt><</tt>,
  <tt>>=</tt>, <tt><=</tt> etc.
- +and+, +or+, +not+
- +in+, <tt>not in</tt>, +exists+, <tt>not exists</tt>, +between+, <tt>not between</tt>
- Group compasison as in <tt>(a,b)=(1,2)</tt>
- Table alias
- Words quoted within <tt>[]</tt>.

The following code is the full parser:

  :include: ../test/src/sql_parser.rb

To get a parser for relation, we can write

  relation_parser = SqlParser::make(SqlParser::relation)

where <tt>SqlParser::relation</tt> is the grammar parser and
<tt>SqlParser::make</tt> connects it to the lexer.

---

Originally written by Ben Yu at {SQL parser in rparsec}[https://web.archive.org/web/20150522220546/https://docs.codehaus.org/display/JPARSEC/SQL+parser+in+rparsec].
